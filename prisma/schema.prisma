generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase-provided URL
}

// User model for authentication
model User {
  id                    String    @id @default(uuid()) @db.Uuid
  username              String    @unique @db.VarChar(50)
  email                 String    @unique @db.VarChar(255)
  passwordHash          String    @db.VarChar(255) // Hashed password (e.g., bcrypt)
  isEmailVerified       Boolean   @default(false)
  verificationToken     String?   @db.VarChar(255)
  verificationTokenExpiry DateTime?
  resetToken            String?   @db.VarChar(255)
  resetTokenExpiry      DateTime?
  runs                  Run[]     // One-to-many relation
  refreshTokens         RefreshToken[] // One-to-many relation for refresh tokens
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// RefreshToken model for JWT refresh tokens
model RefreshToken {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique @db.VarChar(255)
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isRevoked Boolean   @default(false)
  createdAt DateTime  @default(now())
}

// Vibe model for categorizing runs
model Vibe {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(100)
  description String?   @db.Text
  runs        Run[]     // One-to-many relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Run model for speedrun tracking
model Run {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String      @db.Uuid
  user              User        @relation(fields: [userId], references: [id])
  vibeId            String?     @db.Uuid
  vibe              Vibe?       @relation(fields: [vibeId], references: [id])
  techStack         Json?       // Stored as JSON (e.g., ["React", "Node.js"])
  startTime         DateTime    @default(now())
  endTime           DateTime?
  completed         Boolean     @default(false)
  totalTimeInSeconds Int?
  milestones        Milestone[] // One-to-many relation
  submissions       Submission[] // One-to-many relation
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Milestone model for individual milestone completions
model Milestone {
  id             String    @id @default(uuid()) @db.Uuid
  runId          String    @db.Uuid
  run            Run       @relation(fields: [runId], references: [id])
  milestoneIndex Int       @db.SmallInt // 1 to 7
  verified       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Submission model for final run data
model Submission {
  id          String    @id @default(uuid()) @db.Uuid
  runId       String    @db.Uuid
  run         Run       @relation(fields: [runId], references: [id])
  videoUrl    String?   @db.VarChar(255) // Nullable if no recording
  status      Status    @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Enum for submission status
enum Status {
  PENDING
  APPROVED
  REJECTED
}