To ensure your AI agent (presumably used with a tool like Cursor, an AI-powered code editor) follows best practices for Supabase, Prisma, Nest.js, and TypeScript in your SpeedCode backend, you'll need to define project rules in a .cursorrules file. These rules guide the AI on coding style, framework conventions, and database interactions. Below, I'll provide a .cursorrules file tailored to your project, followed by descriptions and globs for every .mcp (module configuration/preferences) file you might need.
.cursorrules File for SpeedCode Backend
File: .cursorrules
markdown

# SpeedCode Backend Project Rules

These rules ensure the AI agent adheres to best practices for Supabase (PostgreSQL), Prisma, Nest.js, and TypeScript.

## General Guidelines

- **Language**: Use TypeScript exclusively for all source code.
- **Style**: Follow Airbnb TypeScript style guide (camelCase variables, PascalCase classes, 2-space indentation).
- **Error Handling**: Always use try-catch blocks for async operations; throw custom errors with meaningful messages.
- **Type Safety**: Enforce strict typing; avoid `any` unless unavoidable (e.g., third-party library quirks).

## Database (Supabase via Prisma)

- **Prisma Usage**:
  - Use Prisma Client for all database operations (`PrismaService` as a singleton).
  - Prefer Prisma's type-safe queries over raw SQL (e.g., `prisma.user.findUnique` instead of `prisma.$queryRaw`).
  - Include relations explicitly with `include` (e.g., `include: { sessions: true }`).
- **Schema Updates**: After modifying `schema.prisma`, run `npx prisma generate` and `npx prisma db push`.
- **Transactions**: Use `prisma.$transaction` for operations spanning multiple tables (e.g., ending a session and creating a submission).
- **Naming**: Match Prisma model names to API resources (e.g., `User` model â†’ `/users` endpoint).

## Nest.js Best Practices

- **Modular Structure**:
  - Organize code into modules (`auth`, `sessions`, `milestones`) under `src/`.
  - Each module has a `.module.ts`, `.controller.ts`, and `.service.ts`.
- **Controllers**:
  - Use RESTful naming (e.g., `@Post('start')` for `/sessions/start`).
  - Validate inputs with `@nestjs/class-validator` and DTOs (e.g., `CreateSessionDto`).
- **Services**:
  - Handle business logic in services, not controllers.
  - Inject `PrismaService` for DB access (e.g., `@Injectable() class SessionsService`).
- **Dependency Injection**: Use Nest.js DI for all dependencies (e.g., `@Inject()` for custom providers).
- **Guards**: Apply `AuthGuard('jwt')` to protect endpoints requiring authentication.
- **File Uploads**: Use `@nestjs/platform-express` `FileInterceptor` for video uploads in `/sessions/end`.

## TypeScript Conventions

- **Interfaces/Type Aliases**: Define DTOs and response types (e.g., `interface SessionResponse { sessionId: number }`).
- **Enums**: Use TypeScript enums for fixed values (e.g., `enum Status { PENDING = 'PENDING', ... }` matches Prisma enum).
- **Async/Await**: Use async/await for all promises; avoid `.then()` chains.
- **Null Safety**: Use optional chaining (`?.`) and nullish coalescing (`??`) where applicable.

## Specific Rules

- **Authentication**: Use `@nestjs/jwt` for JWT generation and validation; store tokens in `User` context, not DB.
- **Session Management**: Calculate `totalTime` in `SessionsService` using `dayjs` (e.g., `dayjs(endTime).diff(startTime)`).
- **Milestone Verification**: Implement test logic in `MilestonesService` (e.g., mock tests for dev, real tests for prod).
- **Video Handling**: Store videos in Supabase Storage; return public URLs in `videoUrl` (use `@supabase/supabase-js`).

## Caching Guidelines

- **Cache Service**: Use `@nestjs/cache-manager` with Redis for distributed caching.
- **Cache Keys**: Follow pattern `{resource}:{id}` or `{resource}:list:{filter}` (e.g., `vibes:123`, `leaderboards:list:slack-clone`).
- **TTL Configuration**:
  - Leaderboards: 5 minutes
  - Vibes: 1 hour
  - User profiles: 15 minutes
  - Run details: 1 minute
- **Cache Invalidation**:
  - Invalidate on write operations (e.g., when a run is completed, invalidate related leaderboard cache).
  - Use cache tags for group invalidation (e.g., tag all vibe caches with 'vibes').
- **Decorators**:
  - Use `@Cacheable()` decorator for GET endpoints.
  - Use `@CacheEvict()` for write operations that modify cached data.
- **Cache Bypass**: Add `?skipCache=true` query parameter option for debugging.
- **Monitoring**: Log cache hits/misses for performance tuning.

## Logging Guidelines

- **Logger Service**: Use `@nestjs/common` Logger with a custom `LoggingService` wrapper.
- **Log Levels**:
  - ERROR: For exceptions and critical failures that affect functionality
  - WARN: For non-critical issues that should be addressed
  - INFO: For important application events (e.g., startup, shutdown, user registration)
  - DEBUG: For detailed information useful during development
  - VERBOSE: For highly detailed tracing information
- **Context**: Always provide context with each log (e.g., `new Logger('AuthService')`) to identify the source.
- **Structured Logging**:
  - Include request ID in all logs for request tracing
  - Log in JSON format in production for better parsing
  - Include metadata object with relevant information (e.g., userId, runId)
- **Sensitive Data**: Never log sensitive information (passwords, tokens, personal data)
- **Performance Logging**:
  - Log execution time for critical operations
  - Use logging interceptor to track request duration
- **Log Storage**:
  - Development: Console output
  - Production: File rotation with compression
  - Consider integration with external services (e.g., Datadog, Sentry)
- **Error Logging**: Always log full error stack traces for exceptions

## Rate Limiting Guidelines

- **Rate Limiter**: Use `@nestjs/throttler` for API rate limiting.
- **Limit Configuration**:
  - Public endpoints: 60 requests per minute
  - Authentication endpoints: 10 requests per minute
  - User-specific endpoints: 120 requests per minute
  - Admin endpoints: 300 requests per minute
- **Scope-Based Limiting**:
  - IP-based limiting for public endpoints
  - User-based limiting for authenticated endpoints
  - Combined IP+User limiting for sensitive operations
- **Custom Limits**:
  - `/auth/login`: 5 attempts per 15 minutes
  - `/auth/register`: 3 attempts per hour
  - `/runs/start`: 10 starts per hour
  - `/submissions`: 5 submissions per hour
- **Response Headers**:
  - Include `X-RateLimit-Limit`, `X-RateLimit-Remaining`, and `X-RateLimit-Reset` headers
- **Storage**:
  - Use Redis for distributed rate limiting in production
  - Use in-memory store for development
- **Bypass Options**:
  - Allow rate limit bypass for specific IPs (e.g., monitoring services)
  - Add bypass token option for internal services
- **Handling Exceeded Limits**:
  - Return 429 Too Many Requests with Retry-After header
  - Log rate limit violations for security monitoring

## Code Examples

- **Controller**:

  ```
  @Controller('sessions')
  @UseGuards(AuthGuard('jwt'))
  export class SessionsController {
    constructor(private readonly sessionsService: SessionsService) {}

    @Post('start')
    async startSession(@Body() dto: CreateSessionDto): Promise<SessionResponse> {
      return this.sessionsService.startSession(dto.techStack);
    }
  }
  ```

- **Service**:

  ```
  @Injectable()
  export class SessionsService {
    constructor(private prisma: PrismaService) {}

    async startSession(techStack: string): Promise<SessionResponse> {
      const session = await this.prisma.session.create({
        data: { techStack, userId: /* from JWT */ }
      });
      return { sessionId: session.id };
    }
  }
  ```

## Environment

- Use `.env` for secrets (e.g., `DATABASE_URL`, `JWT_SECRET`); load with `@nestjs/config`.
- Assume Supabase PostgreSQL for production; local Docker for dev.

**Last Updated**: March 10, 2025

#### Explanation

- **Supabase/Prisma**: Ensures Prisma is the sole DB interface, leveraging Supabase's PostgreSQL and Storage.
- **Nest.js**: Enforces modularity, DI, and RESTful design, common in Nest.js best practices.
- **TypeScript**: Promotes type safety and modern syntax for maintainability.
- **Specifics**: Tailors rules to your SpeedCode backend (JWT auth, session timing, video uploads).
